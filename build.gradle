buildscript {
	repositories {
		maven { url "http://nexus.team.fengchaoli.com/repository/maven-public" }
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "se.transmode.gradle:gradle-docker:${transmodeGradleDockerVersion}"
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

allprojects {
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'registry.cn-shenzhen.aliyuncs.com/nothing'
	version = '1.0'
	sourceCompatibility = 1.8
	compileKotlin {
		kotlinOptions.jvmTarget = "1.8"
	}
	compileTestKotlin {
		kotlinOptions.jvmTarget = "1.8"
	}

	repositories {
		maven { url "http://nexus.team.fengchaoli.com/repository/maven-public" }
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}


	dependencies {
		compile('org.springframework.boot:spring-boot-starter-web')
		compile('org.springframework.boot:spring-boot-starter-actuator')
		compile('org.projectlombok:lombok')
		compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")
		compile("org.jetbrains.kotlin:kotlin-reflect")
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile('org.springframework.security:spring-security-test')
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}


	if (project.subprojects) {
		bootRepackage {
			enabled = false
		}
	} else {
		apply plugin: 'docker'
		docker {
			maintainer = 'zhoujundi <m@zhoujd.me>'
			baseImage = 'openjdk:8-jre-alpine'
		}
		task dockerBuild(type: Docker, dependsOn: build) {
			applicationName = project.name
			addFile {
				from configurations.archives.artifacts.files
				into '/data/workspace/' + project.name
			}
			workingDir '/data/workspace/' + project.name
			setEnvironment('HOST_MACHINE_IP', hostMachineIp)
			defaultCommand(['java', '-jar', '-Dspring.profiles.active=test', "${project.name}-${project.version}.jar"])
		}
	}
}
